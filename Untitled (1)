{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN9DwKnqwdyBZIBDAn/pLHz"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":[],"metadata":{"id":"u1B46a05DK_R"},"execution_count":null,"outputs":[]},{"source":["!pip install kmodes"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0aXvxG09H5jN","executionInfo":{"status":"ok","timestamp":1737814318957,"user_tz":-330,"elapsed":3680,"user":{"displayName":"khushi bansal","userId":"11555524855545349951"}},"outputId":"1c778b7e-3705-4a19-ddfb-82c610a76b3f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting kmodes\n","  Downloading kmodes-0.12.2-py2.py3-none-any.whl.metadata (8.1 kB)\n","Requirement already satisfied: numpy>=1.10.4 in /usr/local/lib/python3.11/dist-packages (from kmodes) (1.26.4)\n","Requirement already satisfied: scikit-learn>=0.22.0 in /usr/local/lib/python3.11/dist-packages (from kmodes) (1.6.1)\n","Requirement already satisfied: scipy>=0.13.3 in /usr/local/lib/python3.11/dist-packages (from kmodes) (1.13.1)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.11/dist-packages (from kmodes) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=0.22.0->kmodes) (3.5.0)\n","Downloading kmodes-0.12.2-py2.py3-none-any.whl (20 kB)\n","Installing collected packages: kmodes\n","Successfully installed kmodes-0.12.2\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from kmodes.kprototypes import KPrototypes\n","from sklearn.preprocessing import MinMaxScaler\n","\n","# Load the dataset\n","file_path = '/content/updated_dataset_final.csv'\n","data = pd.read_csv(file_path)\n","\n","# Step 1: Feature Selection (Include 'name_of_medicine' if present)\n","features = [ 'name','salts', 'packaging_form', 'quantity', 'retail_price', 'discounted_price', 'manufacturer']\n","data = data[features]\n","\n","# Step 2: Preprocessing\n","# Convert categorical columns to strings for encoding\n","categorical_cols = ['salts', 'packaging_form', 'manufacturer']\n","data[categorical_cols] = data[categorical_cols].astype(str)\n","\n","# Convert 'quantity' into numerical (e.g., split into numeric value and unit)\n","def parse_quantity(qty):\n","    qty_split = qty.split()\n","    if len(qty_split) == 2:\n","        value, unit = qty_split\n","        try:\n","            return float(value)\n","        except ValueError:\n","            return np.nan\n","    return np.nan\n","data['quantity_numeric'] = data['quantity'].apply(parse_quantity)\n","data = data.dropna(subset=['quantity_numeric'])\n","\n","# Normalize numerical features\n","scaler = MinMaxScaler()\n","numerical_cols = ['retail_price', 'discounted_price', 'quantity_numeric']\n","data[numerical_cols] = scaler.fit_transform(data[numerical_cols])\n","\n","# Prepare data for K-Prototypes\n","# Combine categorical and numerical features\n","matrix = data[numerical_cols + categorical_cols].copy()\n","\n","# Convert categorical features to indices\n","for col in categorical_cols:\n","    matrix[col] = matrix[col].astype('category').cat.codes\n","\n","# Step 3: K-Prototypes Clustering\n","# Define number of clusters (k)\n","k = 5\n","kproto = KPrototypes(n_clusters=k, init='Huang', random_state=42)\n","clusters = kproto.fit_predict(matrix, categorical=[3, 4, 5])\n","\n","# Add cluster labels to the original data\n","data['cluster'] = clusters\n","\n","# Step 4: Save and Analyze Results\n","# Save clustered data to a CSV file (Include 'name_of_medicine' column if present)\n","data.to_csv('/content/clustered_medicines_final.csv', index=False)\n","print(\"Clustered data saved to 'clustered_medicines_final.csv'\")\n","\n","# Display cluster summaries\n","grouped = data.groupby('cluster')\n","for cluster, group in grouped:\n","    print(f\"Cluster {cluster}\")\n","    print(group[[ 'salts', 'packaging_form', 'quantity', 'cluster']].head(3))\n","    print(\"\\n\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YNVUgUlL5e6u","executionInfo":{"status":"ok","timestamp":1737817104104,"user_tz":-330,"elapsed":11156,"user":{"displayName":"khushi bansal","userId":"11555524855545349951"}},"outputId":"1899c70b-405e-4d7b-8bc1-be1093c4db64"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Clustered data saved to 'clustered_medicines_final.csv'\n","Cluster 0\n","                                                salts packaging_form quantity  \\\n","6                          paracetamol (156.25mg/5ml)         bottle  6001 ml   \n","10                            paracetamol (250mg/5ml)         bottle  6001 ml   \n","39  mefenamic acid (50mg/5ml) + paracetamol (125mg...         bottle  6001 ml   \n","\n","    cluster  \n","6         0  \n","10        0  \n","39        0  \n","\n","\n","Cluster 1\n","                                                salts packaging_form quantity  \\\n","57                                 diclofenac(1.16 %)           tube    30 ml   \n","63  diclofenac + linseed oil + menthol + methyl sa...           tube    30 ml   \n","75                                diclofenac(75.0 mg)        ampoule     1 ml   \n","\n","    cluster  \n","57        1  \n","63        1  \n","75        1  \n","\n","\n","Cluster 2\n","                                      salts       packaging_form   quantity  \\\n","2                        paracetamol-1000mg       strip | tablet  10 tablet   \n","3                         paracetamol-120mg  bottle | suspension      60 ml   \n","5  paracetamol/acetaminophen 156.25 mg /5ml         bottle syrup      60 ml   \n","\n","   cluster  \n","2        2  \n","3        2  \n","5        2  \n","\n","\n","Cluster 3\n","                   salts    packaging_form quantity  cluster\n","847      docetaxel-120mg  vial | injection    03 ml        3\n","848  docetaxel(120.0 mg)         injection     1 ml        3\n","851            docetaxel              vial     1 ml        3\n","\n","\n","Cluster 4\n","                                       salts packaging_form     quantity  \\\n","0         paracetamol / acetaminophen(1.0 g)          strip    10 tablet   \n","1                       paracetamol (1000mg)          strip  1001 tablet   \n","4  paracetamol / acetaminophen(120.0 mg/5ml)         bottle        60 ml   \n","\n","   cluster  \n","0        4  \n","1        4  \n","4        4  \n","\n","\n"]}]},{"cell_type":"code","source":["!pip install pymongo"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gwRnc4sg0rqN","executionInfo":{"status":"ok","timestamp":1737814635763,"user_tz":-330,"elapsed":5570,"user":{"displayName":"khushi bansal","userId":"11555524855545349951"}},"outputId":"fcdf0f3d-56a2-4670-c753-0f78d1e6523e"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting pymongo\n","  Downloading pymongo-4.10.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (22 kB)\n","Collecting dnspython<3.0.0,>=1.16.0 (from pymongo)\n","  Downloading dnspython-2.7.0-py3-none-any.whl.metadata (5.8 kB)\n","Downloading pymongo-4.10.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.7 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m20.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading dnspython-2.7.0-py3-none-any.whl (313 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m313.6/313.6 kB\u001b[0m \u001b[31m22.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: dnspython, pymongo\n","Successfully installed dnspython-2.7.0 pymongo-4.10.1\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"gFEPAOU02UI5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!pip install --upgrade google-auth-oauthlib google-auth-httplib2 google-api-python-client\n","import pandas as pd\n","import gspread\n","from google.colab import auth\n","from google.auth import default\n","\n","# Authenticate and connect to Google Sheets\n","auth.authenticate_user()\n","creds, _ = default() # Get credentials using google.auth\n","gc = gspread.authorize(creds) # Authorize with gspread using the new credentials format\n","\n","# Create or open the sheet\n","sh = gc.create(\"Medicine Data1\")  # Creates a new sheet\n","worksheet = sh.sheet1\n","\n","# Read the CSV\n","csv_file = \"/content/clustered_medicines_final.csv\"\n","data = pd.read_csv(csv_file)\n","\n","# Upload data to Google Sheets\n","worksheet.update([data.columns.values.tolist()] + data.values.tolist())\n","print(\"Data uploaded to Google Sheets!\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Rfkjf6k922Xg","executionInfo":{"status":"ok","timestamp":1737818930806,"user_tz":-330,"elapsed":13485,"user":{"displayName":"khushi bansal","userId":"11555524855545349951"}},"outputId":"24ed5eeb-20fa-4771-a386-0d0bf2ca041f"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: google-auth-oauthlib in /usr/local/lib/python3.11/dist-packages (1.2.1)\n","Requirement already satisfied: google-auth-httplib2 in /usr/local/lib/python3.11/dist-packages (0.2.0)\n","Requirement already satisfied: google-api-python-client in /usr/local/lib/python3.11/dist-packages (2.159.0)\n","Requirement already satisfied: google-auth>=2.15.0 in /usr/local/lib/python3.11/dist-packages (from google-auth-oauthlib) (2.27.0)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from google-auth-oauthlib) (1.3.1)\n","Requirement already satisfied: httplib2>=0.19.0 in /usr/local/lib/python3.11/dist-packages (from google-auth-httplib2) (0.22.0)\n","Requirement already satisfied: google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5 in /usr/local/lib/python3.11/dist-packages (from google-api-python-client) (2.19.2)\n","Requirement already satisfied: uritemplate<5,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from google-api-python-client) (4.1.1)\n","Requirement already satisfied: googleapis-common-protos<2.0.dev0,>=1.56.2 in /usr/local/lib/python3.11/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (1.66.0)\n","Requirement already satisfied: protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0.dev0,>=3.19.5 in /usr/local/lib/python3.11/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (4.25.5)\n","Requirement already satisfied: proto-plus<2.0.0dev,>=1.22.3 in /usr/local/lib/python3.11/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (1.25.0)\n","Requirement already satisfied: requests<3.0.0.dev0,>=2.18.0 in /usr/local/lib/python3.11/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (2.32.3)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from google-auth>=2.15.0->google-auth-oauthlib) (5.5.1)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from google-auth>=2.15.0->google-auth-oauthlib) (0.4.1)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.11/dist-packages (from google-auth>=2.15.0->google-auth-oauthlib) (4.9)\n","Requirement already satisfied: pyparsing!=3.0.0,!=3.0.1,!=3.0.2,!=3.0.3,<4,>=2.4.2 in /usr/local/lib/python3.11/dist-packages (from httplib2>=0.19.0->google-auth-httplib2) (3.2.1)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.11/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib) (3.2.2)\n","Requirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /usr/local/lib/python3.11/dist-packages (from pyasn1-modules>=0.2.1->google-auth>=2.15.0->google-auth-oauthlib) (0.6.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (2.3.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (2024.12.14)\n","Data uploaded to Google Sheets!\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import gspread\n","from google.colab import auth\n","from google.auth import default\n","\n","# Authenticate and connect to Google Sheets\n","auth.authenticate_user()\n","creds, _ = default()  # Get credentials using google.auth\n","gc = gspread.authorize(creds)  # Authorize with gspread using the obtained credentials\n","\n","# Open your Google Sheet\n","sheet_name = \"Medicine Data1\"\n","sheet = gc.open(sheet_name).sheet1\n","\n","# Load data into a DataFrame\n","data = pd.DataFrame(sheet.get_all_records())\n","\n","# Compute unique medicines\n","unique_medicines = data['salts'].nunique()\n","\n","# Compute duplicate rows\n","duplicate_rows = data.duplicated().sum()\n","\n","# Cluster distribution\n","cluster_distribution = data['cluster'].value_counts()\n","\n","# Inconsistent naming\n","inconsistent_names = data['salts'].nunique() != data['salts'].str.lower().nunique()\n","\n","# Display results\n","print(f\"Number of Unique Medicines: {unique_medicines}\")\n","print(f\"Number of Duplicate Rows: {duplicate_rows}\")\n","print(\"Cluster Distribution:\")\n","print(cluster_distribution)\n","print(f\"Inconsistent Naming Detected: {inconsistent_names}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HOpMLAhJ69rY","executionInfo":{"status":"ok","timestamp":1737818940376,"user_tz":-330,"elapsed":4150,"user":{"displayName":"khushi bansal","userId":"11555524855545349951"}},"outputId":"1ca39e41-c4f9-49fe-8b52-b0e5910077b4"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of Unique Medicines: 617\n","Number of Duplicate Rows: 0\n","Cluster Distribution:\n","cluster\n","4    606\n","2    433\n","1     97\n","0     42\n","3      4\n","Name: count, dtype: int64\n","Inconsistent Naming Detected: False\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"AXOFE54z_Lpg"}}]}